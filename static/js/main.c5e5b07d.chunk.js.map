{"version":3,"sources":["utils/AppContext.js","components/Search.js","components/Table.js","components/Cards.js","App.js","reportWebVitals.js","index.js"],"names":["React","createContext","Search","type","useContext","AppContext","criteria","setCriteria","setSearch","sort","setSort","display","setDisplay","className","for","id","value","onChange","e","target","Table","search","parseInt","scope","employees","filter","item","toString","toLowerCase","includes","a","b","map","employee","Cards","App","useState","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c5e5b07d.chunk.js","sourcesContent":["import React from 'react';\r\nexport default React.createContext()","import React, { useContext } from 'react'\r\nimport AppContext from '../utils/AppContext'\r\n\r\n\r\nexport default function Search() {\r\n    const { criteria, setCriteria, setSearch, sort, setSort, display, setDisplay } = useContext(AppContext)\r\n    let type;\r\n    switch (criteria) {\r\n        case \"First Name\":\r\n            type = \"text\"\r\n            break;\r\n        case \"Last Name\":\r\n            type = \"text\"\r\n            break;\r\n        case \"E-mail\":\r\n            type = \"email\"\r\n            break;\r\n        case \"Employee Number\":\r\n            type = \"number\"\r\n            break;\r\n        case \"Position\":\r\n            type = \"text\"\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n\r\n                <form className=\"my-3\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6\">\r\n                            <div className=\"form-group mb-3 \">\r\n                                <label for=\"search-criteria\" className=\"form-label\">Search / Sort by :</label>\r\n                                <select className=\"form-control\" id=\"search-criteria\" value={criteria} onChange={(e) => setCriteria(e.target.value)}>\r\n                                    <option value=\"Employee Number\">Employee Number</option>\r\n                                    <option value=\"First Name\">First Name</option>\r\n                                    <option value=\"Last Name\">Last Name</option>\r\n                                    <option value=\"Position\">Position</option>\r\n                                </select>\r\n                            </div>\r\n                            <label for=\"search-input\" className=\"form-label\">{criteria}</label>\r\n                            <input type={type} className=\"form-control\" id=\"search-input\" onChange={(e) => setSearch(e.target.value)}></input>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <div className=\"form-group mb-3 \">\r\n                                <label for=\"sort-criteria\" className=\"form-label\">Sort </label>\r\n                                <select className=\"form-control\" id=\"sort-criteria\" value={sort} onChange={(e) => setSort(e.target.value)}>\r\n                                    <option value=\"1\">Ascending</option>\r\n                                    <option value=\"-1\">Descending</option>\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 \">\r\n                                <label for=\"display-criteria\" className=\"form-label\">Display Mode </label>\r\n                                <select className=\"form-control\" id=\"display-criteria\" value={display} onChange={(e) => setDisplay(e.target.value)}>\r\n                                    <option value=\"Table\">Table</option>\r\n                                    <option value=\"Cards\">Cards</option>\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}","import React, { useContext } from 'react'\r\nimport AppContext from '../utils/AppContext'\r\nimport employees from './employee.json'\r\n\r\n\r\nexport default function Table() {\r\n    let { criteria, sort, search } = useContext(AppContext)\r\n    sort = parseInt(sort)\r\n    return (\r\n        <>\r\n            <table className=\"table table-striped\">\r\n                <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">Employee Number</th>\r\n                        <th scope=\"col\">First Name</th>\r\n                        <th scope=\"col\">Last Name</th>\r\n                        <th scope=\"col\">E-mail</th>\r\n                        <th scope=\"col\">Position</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {employees\r\n                        .filter(item => search === \"\" ? true : item[criteria].toString().toLowerCase().includes(search.toString().toLowerCase())) //display all if search is empty\r\n                        .sort((a, b) => (a[criteria] > b[criteria]) ? 1 * sort : ((b[criteria] > a[criteria]) ? -1 * sort : 0)) //sort based on criteria\r\n                        .map(employee =>\r\n                            <tr key={employee[\"Employee Number\"]}>\r\n                                <th scope=\"row\">{employee[\"Employee Number\"]}</th>\r\n                                <td>{employee[\"First Name\"]}</td>\r\n                                <td>{employee[\"Last Name\"]}</td>\r\n                                <td>{employee[\"E-mail\"]}</td>\r\n                                <td>{employee[\"Position\"]}</td>\r\n                            </tr>)}\r\n                </tbody>\r\n            </table>\r\n        </>\r\n    )\r\n}","import React, { useContext } from 'react'\r\nimport AppContext from '../utils/AppContext'\r\nimport employees from './employee.json'\r\n\r\n\r\nexport default function Cards() {\r\n    let { criteria, sort, search } = useContext(AppContext)\r\n    sort = parseInt(sort)\r\n    return (\r\n        <div className=\"d-flex flex-wrap justify-content-around\">\r\n\r\n            {employees\r\n                .filter(item => search === \"\" ? true : item[criteria].toString().toLowerCase().includes(search.toString().toLowerCase())) //display all if search is empty\r\n                .sort((a, b) => (a[criteria] > b[criteria]) ? 1 * sort : ((b[criteria] > a[criteria]) ? -1 * sort : 0)) //sort based on criteria\r\n                .map(employee =>\r\n                    <div className=\"card mb-3 mx-3 flex-grow-1\" key={employee[\"Employee Number\"]}>\r\n                        <h5 className=\"card-header text-center\">{employee[\"First Name\"]} {employee[\"Last Name\"]}</h5>\r\n                        <div className=\"card-body\">\r\n                            <ul className=\"list-unstyled\">\r\n                                <li><strong>Employee Number: </strong>{employee[\"Employee Number\"]}</li>\r\n                                <li><strong>Position: </strong>{employee[\"E-mail\"]}</li>\r\n                                <li><strong>E-mail: </strong>{employee[\"Position\"]}</li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>)}\r\n\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react'\nimport Search from './components/Search'\nimport Table from './components/Table'\nimport Cards from \"./components/Cards\"\nimport AppContext from './utils/AppContext'\n\nfunction App() {\n  const [criteria, setCriteria] = useState(\"First Name\")\n  const [search, setSearch] = useState(\"\")\n  const [sort, setSort] = useState(\"1\")\n  const [display, setDisplay] = useState(\"Table\")\n\n\n\n  return (\n    <>\n      <div className=\"container\">\n        <AppContext.Provider value={{ criteria, setCriteria, search, setSearch, sort, setSort, display, setDisplay }}>\n          <Search />\n          {display === \"Table\" ? <Table /> : <Cards />}\n        </AppContext.Provider>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}